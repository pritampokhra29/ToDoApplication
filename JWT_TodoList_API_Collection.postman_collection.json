{
	"info": {
		"_postman_id": "jwt-collection-2025",
		"name": "JWT TodoList API Collection",
		"description": "Complete TodoList API collection with JWT authentication, auto-token management, and RESTful endpoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{accessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Set base URL if not already set",
					"if (!pm.collectionVariables.get('baseUrl')) {",
					"    pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
					"}",
					"",
					"// Check if access token is expired and refresh if needed",
					"const accessToken = pm.collectionVariables.get('accessToken');",
					"const refreshToken = pm.collectionVariables.get('refreshToken');",
					"const expiresAt = pm.collectionVariables.get('expiresAt');",
					"",
					"if (accessToken && refreshToken && expiresAt) {",
					"    const now = new Date().getTime();",
					"    const expiry = new Date(expiresAt).getTime();",
					"    ",
					"    // If token expires in next 5 minutes, refresh it",
					"    if (now >= (expiry - 300000)) {",
					"        console.log('Access token is expiring soon, attempting refresh...');",
					"        ",
					"        const refreshRequest = {",
					"            url: pm.collectionVariables.get('baseUrl') + '/auth/refresh',",
					"            method: 'POST',",
					"            header: {",
					"                'Content-Type': 'application/json'",
					"            },",
					"            body: {",
					"                mode: 'raw',",
					"                raw: JSON.stringify({",
					"                    refreshToken: refreshToken",
					"                })",
					"            }",
					"        };",
					"        ",
					"        pm.sendRequest(refreshRequest, function (err, response) {",
					"            if (err) {",
					"                console.log('Token refresh failed:', err);",
					"            } else if (response.code === 200) {",
					"                const responseData = response.json();",
					"                pm.collectionVariables.set('accessToken', responseData.accessToken);",
					"                pm.collectionVariables.set('refreshToken', responseData.refreshToken);",
					"                pm.collectionVariables.set('expiresAt', responseData.expiresAt);",
					"                console.log('Token refreshed successfully');",
					"            } else {",
					"                console.log('Token refresh failed with status:', response.code);",
					"            }",
					"        });",
					"    }",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "accessToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "refreshToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "expiresAt",
			"value": "",
			"type": "string"
		},
		{
			"key": "username",
			"value": "",
			"type": "string"
		},
		{
			"key": "taskId",
			"value": "1",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "üîê Authentication",
			"item": [
				{
					"name": "Check Auth Config",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/auth/config",
							"host": ["{{baseUrl}}"],
							"path": ["auth", "config"]
						},
						"description": "Check authentication configuration and JWT status"
					},
					"response": []
				},
				{
					"name": "Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseData = pm.response.json();",
									"    pm.collectionVariables.set('accessToken', responseData.accessToken);",
									"    pm.collectionVariables.set('refreshToken', responseData.refreshToken);",
									"    pm.collectionVariables.set('expiresAt', responseData.expiresAt);",
									"    pm.collectionVariables.set('username', responseData.username);",
									"    console.log('Admin login successful - tokens stored in collection variables');",
									"    pm.test('Login successful', function () {",
									"        pm.response.to.have.status(200);",
									"        pm.expect(responseData).to.have.property('accessToken');",
									"        pm.expect(responseData).to.have.property('refreshToken');",
									"    });",
									"} else {",
									"    pm.test('Login failed', function () {",
									"        pm.response.to.not.have.status(200);",
									"    });",
									"    console.log('Admin login failed:', pm.response.text());",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"admin123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": ["{{baseUrl}}"],
							"path": ["auth", "login"]
						},
						"description": "Login as admin and store JWT tokens in collection variables"
					},
					"response": []
				},
				{
					"name": "User Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseData = pm.response.json();",
									"    pm.collectionVariables.set('accessToken', responseData.accessToken);",
									"    pm.collectionVariables.set('refreshToken', responseData.refreshToken);",
									"    pm.collectionVariables.set('expiresAt', responseData.expiresAt);",
									"    pm.collectionVariables.set('username', responseData.username);",
									"    console.log('User login successful - tokens stored in collection variables');",
									"    pm.test('Login successful', function () {",
									"        pm.response.to.have.status(200);",
									"        pm.expect(responseData).to.have.property('accessToken');",
									"        pm.expect(responseData).to.have.property('refreshToken');",
									"    });",
									"} else {",
									"    pm.test('Login failed', function () {",
									"        pm.response.to.not.have.status(200);",
									"    });",
									"    console.log('User login failed:', pm.response.text());",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"john\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": ["{{baseUrl}}"],
							"path": ["auth", "login"]
						},
						"description": "Login as regular user and store JWT tokens in collection variables"
					},
					"response": []
				},
				{
					"name": "Register New User (Admin Only)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"newuser\",\n    \"password\": \"password123\",\n    \"email\": \"newuser@example.com\",\n    \"role\": \"USER\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": ["{{baseUrl}}"],
							"path": ["auth", "register"]
						},
						"description": "Register a new user (requires admin JWT token)"
					},
					"response": []
				},
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseData = pm.response.json();",
									"    pm.collectionVariables.set('accessToken', responseData.accessToken);",
									"    pm.collectionVariables.set('refreshToken', responseData.refreshToken);",
									"    pm.collectionVariables.set('expiresAt', responseData.expiresAt);",
									"    console.log('Token refresh successful - new tokens stored');",
									"    pm.test('Token refresh successful', function () {",
									"        pm.response.to.have.status(200);",
									"        pm.expect(responseData).to.have.property('accessToken');",
									"    });",
									"} else {",
									"    pm.test('Token refresh failed', function () {",
									"        pm.response.to.not.have.status(200);",
									"    });",
									"    console.log('Token refresh failed:', pm.response.text());",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refreshToken\": \"{{refreshToken}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/refresh",
							"host": ["{{baseUrl}}"],
							"path": ["auth", "refresh"]
						},
						"description": "Refresh access token using refresh token"
					},
					"response": []
				},
				{
					"name": "Check Auth Status",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/auth/status",
							"host": ["{{baseUrl}}"],
							"path": ["auth", "status"]
						},
						"description": "Check current authentication status"
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (pm.response.code === 200) {",
									"    // Clear stored tokens on successful logout",
									"    pm.collectionVariables.set('accessToken', '');",
									"    pm.collectionVariables.set('refreshToken', '');",
									"    pm.collectionVariables.set('expiresAt', '');",
									"    pm.collectionVariables.set('username', '');",
									"    console.log('Logout successful - tokens cleared from collection variables');",
									"    pm.test('Logout successful', function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"} else {",
									"    pm.test('Logout failed', function () {",
									"        pm.response.to.not.have.status(200);",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refreshToken\": \"{{refreshToken}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/logout",
							"host": ["{{baseUrl}}"],
							"path": ["auth", "logout"]
						},
						"description": "Logout and invalidate both access and refresh tokens"
					},
					"response": []
				}
			]
		},
		{
			"name": "üìã Tasks CRUD",
			"item": [
				{
					"name": "Get All Tasks",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/tasks",
							"host": ["{{baseUrl}}"],
							"path": ["tasks"]
						},
						"description": "Get all tasks for the authenticated user"
					},
					"response": []
				},
				{
					"name": "Create New Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseData = pm.response.json();",
									"    if (responseData && responseData.id) {",
									"        pm.collectionVariables.set('taskId', responseData.id.toString());",
									"        console.log('Task created with ID:', responseData.id);",
									"    }",
									"    pm.test('Task creation successful', function () {",
									"        pm.response.to.have.status(200);",
									"        pm.expect(responseData).to.have.property('id');",
									"        pm.expect(responseData).to.have.property('title');",
									"    });",
									"} else {",
									"    pm.test('Task creation failed', function () {",
									"        pm.response.to.not.have.status(200);",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Test Task from Postman\",\n    \"description\": \"This is a test task created via Postman API\",\n    \"priority\": \"HIGH\",\n    \"status\": \"PENDING\",\n    \"category\": \"Work\",\n    \"dueDate\": \"2025-08-30\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/tasks",
							"host": ["{{baseUrl}}"],
							"path": ["tasks"]
						},
						"description": "Create a new task and store its ID for subsequent operations"
					},
					"response": []
				},
				{
					"name": "Get Task by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/tasks/{{taskId}}",
							"host": ["{{baseUrl}}"],
							"path": ["tasks", "{{taskId}}"]
						},
						"description": "Get a specific task by its ID using RESTful path parameter"
					},
					"response": []
				},
				{
					"name": "Update Task by ID",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Updated Task Title\",\n    \"description\": \"This task has been updated via Postman API\",\n    \"priority\": \"MEDIUM\",\n    \"status\": \"IN_PROGRESS\",\n    \"category\": \"Work\",\n    \"dueDate\": \"2025-08-31\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/tasks/{{taskId}}",
							"host": ["{{baseUrl}}"],
							"path": ["tasks", "{{taskId}}"]
						},
						"description": "Update a specific task by its ID using RESTful PUT with path parameter"
					},
					"response": []
				},
				{
					"name": "Delete Task by ID",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/tasks/{{taskId}}",
							"host": ["{{baseUrl}}"],
							"path": ["tasks", "{{taskId}}"]
						},
						"description": "Delete a specific task by its ID using RESTful DELETE with path parameter"
					},
					"response": []
				}
			]
		},
		{
			"name": "üìä Tasks Advanced",
			"item": [
				{
					"name": "Get Tasks with Pagination",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/tasks/paginated?page=0&size=5&sortBy=createDate&sortDir=desc",
							"host": ["{{baseUrl}}"],
							"path": ["tasks", "paginated"],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "5"
								},
								{
									"key": "sortBy",
									"value": "createDate"
								},
								{
									"key": "sortDir",
									"value": "desc"
								}
							]
						},
						"description": "Get paginated tasks with sorting"
					},
					"response": []
				},
				{
					"name": "Search Tasks by Title",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/tasks/search?title=test",
							"host": ["{{baseUrl}}"],
							"path": ["tasks", "search"],
							"query": [
								{
									"key": "title",
									"value": "test"
								}
							]
						},
						"description": "Search tasks by title containing specific text"
					},
					"response": []
				},
				{
					"name": "Filter Tasks by Status",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/tasks/filter?status=PENDING",
							"host": ["{{baseUrl}}"],
							"path": ["tasks", "filter"],
							"query": [
								{
									"key": "status",
									"value": "PENDING"
								}
							]
						},
						"description": "Filter tasks by status"
					},
					"response": []
				},
				{
					"name": "Get Tasks Due Today",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/tasks/due-today",
							"host": ["{{baseUrl}}"],
							"path": ["tasks", "due-today"]
						},
						"description": "Get all tasks due today"
					},
					"response": []
				}
			]
		},
		{
			"name": "üß™ Test Scenarios",
			"item": [
				{
					"name": "Test Token Expiry Handling",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/tasks",
							"host": ["{{baseUrl}}"],
							"path": ["tasks"]
						},
						"description": "This request will automatically refresh token if it's about to expire (check Pre-request Script)"
					},
					"response": []
				},
				{
					"name": "Test Logout Token Invalidation",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// This test should fail with 401 after logout",
									"pm.test('Request should fail with 401 Unauthorized after logout', function () {",
									"    pm.response.to.have.status(401);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/tasks",
							"host": ["{{baseUrl}}"],
							"path": ["tasks"]
						},
						"description": "Use this request AFTER logout to verify token invalidation works properly"
					},
					"response": []
				}
			]
		}
	]
}
